[{"path":"https://jolars.github.io/tactile/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright Â© 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://jolars.github.io/tactile/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://jolars.github.io/tactile/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"â€œThis Licenseâ€ refers version 3 GNU General Public License. â€œCopyrightâ€ also means copyright-like laws apply kinds works, semiconductor masks. â€œThe Programâ€ refers copyrightable work licensed License. licensee addressed â€œyouâ€. â€œLicenseesâ€ â€œrecipientsâ€ may individuals organizations. â€œmodifyâ€ work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called â€œmodified versionâ€ earlier work work â€œbased onâ€ earlier work. â€œcovered workâ€ means either unmodified Program work based Program. â€œpropagateâ€ work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. â€œconveyâ€ work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays â€œAppropriate Legal Noticesâ€ extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://jolars.github.io/tactile/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"â€œsource codeâ€ work means preferred form work making modifications . â€œObject codeâ€ means non-source form work. â€œStandard Interfaceâ€ means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. â€œSystem Librariesâ€ executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. â€œMajor Componentâ€, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . â€œCorresponding Sourceâ€ work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://jolars.github.io/tactile/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://jolars.github.io/tactile/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://jolars.github.io/tactile/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://jolars.github.io/tactile/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 â€œkeep intact noticesâ€. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called â€œaggregateâ€ compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://jolars.github.io/tactile/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. â€œUser Productâ€ either (1) â€œconsumer productâ€, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, â€œnormally usedâ€ refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. â€œInstallation Informationâ€ User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://jolars.github.io/tactile/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"â€œAdditional permissionsâ€ terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered â€œfurther restrictionsâ€ within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://jolars.github.io/tactile/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://jolars.github.io/tactile/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://jolars.github.io/tactile/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. â€œentity transactionâ€ transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://jolars.github.io/tactile/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"â€œcontributorâ€ copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s â€œcontributor versionâ€. contributor’s â€œessential patent claimsâ€ patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, â€œcontrolâ€ includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, â€œpatent licenseâ€ express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). â€œgrantâ€ patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. â€œKnowingly relyingâ€ means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license â€œdiscriminatoryâ€ include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://jolars.github.io/tactile/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://jolars.github.io/tactile/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://jolars.github.io/tactile/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License â€œor later versionâ€ applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://jolars.github.io/tactile/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM â€œAS ISâ€ WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://jolars.github.io/tactile/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://jolars.github.io/tactile/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://jolars.github.io/tactile/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least â€œcopyrightâ€ line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use â€œabout boxâ€. also get employer (work programmer) school, , sign â€œcopyright disclaimerâ€ program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2017 Johan Larsson  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. tactile Copyright (C) 2017 Johan Larsson This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://jolars.github.io/tactile/articles/new-high-level-functions.html","id":"ternaryplot-ternary-plots","dir":"Articles","previous_headings":"","what":"ternaryplot(): Ternary plots","title":"New high-level functions","text":"Ternary plots display proportions three variables two-dimensional grid popular compositional analysis. tactile can used generate ternary plots ternaryplot() takes formula, matrix, data.frame objects input. formula method – focus vignette – used form top ~ left * right terms dimensions ternary diagram. showcase use ternaryplot() ’ll use data article Grove Jenkins imported tactile made available simply calling feldspar. begin simplest form ternary plot.  bells whistles lattice graphics available tactile , may benefit , instance, grouping variables coexisting feldspar factor Feldspar. , also remove useless box around plot.  Another feature visualize compositions, make sense larger dataset, add two-dimensional density estimates. setting density argument TRUE. Instead superposing two types composite feldspars, now condition instead.  density estimations produced first applying isometric log transformation computing density estimates MASS::kde2d() returning coordinates ternary coordinate space. One feature available model response compositional data. (obviously) need separate outcome variable use temperature reaction feldspar experiments, offering examples version region fills one contours.","code":"library(tactile) #> Loading required package: lattice ternaryplot(Or ~ An * Ab, data = feldspar) ternaryplot(Or ~ An * Ab,   groups = Feldspar, data = feldspar,   auto.key = list(space = \"right\"),   par.settings = list(axis.line = list(col = \"transparent\")) ) ternaryplot(Or ~ An * Ab | Feldspar, data = feldspar, density = TRUE) ternaryplot(Or ~ An * Ab,   response = Pressure, data = feldspar,   contour = FALSE ) ternaryplot(Or ~ An * Ab, response = Pressure, data = feldspar, region = FALSE)"},{"path":"https://jolars.github.io/tactile/articles/new-high-level-functions.html","id":"bubbleplot-bubbleplots","dir":"Articles","previous_headings":"","what":"bubbleplot(): Bubbleplots","title":"New high-level functions","text":"Bubble plots simple scatter plots extended third dimensions mapping third variable size (area) plot symbols, theoretically anything usually points. Bubble plots made famous late Hans Rosling. Bubble plots tactile available bubbleplot() take formula type bubblesize ~ x * y first argument. illustrate mtcars data set R sports features 32 cars 1974 Motor Trend US magazine. start mapping displacement bubble size horsepower (hp) weight (wt).  elaborate designs can fashioned combine plot specialized panel functions lattice. , also change filled circle design semitransparent bubbles.","code":"bubbleplot(disp ~ hp * wt, groups = cyl, data = mtcars, auto.key = TRUE) bubbleplot(disp ~ hp * wt | factor(cyl),   data = mtcars, auto.key = TRUE,   pch = 16, alpha = 0.5, layout = c(3, 1),   panel = function(x, y, z, ...) {     panel.lmline(x, y, ...)     panel.bubbleplot(x, y, z, ...)   } )"},{"path":"https://jolars.github.io/tactile/articles/new-methods.html","id":"xyplot-lm-linear-model-diagnostics","dir":"Articles","previous_headings":"","what":"xyplot.lm(): Linear model diagnostics","title":"New methods","text":"tactile provides xyplot() method lm objects – usually generated stats::lm() stats::glm(). provides type diagnostic plots stats::plot.lm() covers, small modifications method provided user may use lattice graphics throughout document, say lab report, produce consistent graphic material can changed general level (instance using lattice.options()).","code":""},{"path":"https://jolars.github.io/tactile/articles/new-methods.html","id":"usage","dir":"Articles","previous_headings":"xyplot.lm(): Linear model diagnostics","what":"Usage","title":"New methods","text":"fit simple linear model , fist use default option plot diagnostics using stats::plot() Plot diagnostics stats::plot.lm(). instead use method provided tactile. Plot diagnostics xyplot.lm(). see results similar. benefits, however, using xyplot.lm() tactile handling plot margins much improved, plots returned list trellis objects (can updated), general plot settings lattice respected (mostly), longer specify par(mfrow = c(2, 2)). plots arranged via gridExtra::grid.arrange() automatically arguments nrow ncol made accessible xyplot.lm() call enable manual specifications.","code":"fit <- lm(Sepal.Length ~ Sepal.Width, data = iris) par(mfrow = c(3, 2), cex = 1) plot(fit, which = 1:6) par(mfrow = c(1, 1)) library(tactile) #> Loading required package: lattice xyplot(fit, which = 1:6)"},{"path":"https://jolars.github.io/tactile/articles/new-methods.html","id":"xyplot-arima-arima-model-diagnostics","dir":"Articles","previous_headings":"","what":"xyplot.Arima: ARIMA Model Diagnostics","title":"New methods","text":"function similar xyplot.lm() modeled stats::tsdiag(). First, look output original.  use method tactile, just call xyplot() model fit. prominent difference ’ve added Q-Q plot standardized residuals well, also ’re correcting Ljung–Box test account fact ’ve fit model.","code":"fit <- arima(lh, c(0, 0, 1)) tsdiag(fit) xyplot(fit)"},{"path":"https://jolars.github.io/tactile/articles/new-methods.html","id":"xyplot-forecast-plotting-forecasts-with-tactile","dir":"Articles","previous_headings":"","what":"xyplot.forecast(): Plotting forecasts with tactile","title":"New methods","text":"Robert Hyndman’s excellent forecast package built-functions plotting forecasts. reworked use lattice graphics tactile, also try place forecasts time scale original data (provided). example, user USAccDeaths, time series giving monthly totals accidental deaths USA. begin separating series training test set. fit model plot results.  called fan plot can achieved increasing number prediction intervals call forecast. also switch separate color palette using ci_pal argument.","code":"library(forecast) #> Registered S3 method overwritten by 'quantmod': #>   method            from #>   as.zoo.data.frame zoo train <- window(USAccDeaths, c(1973, 1), c(1977, 12)) test <- window(USAccDeaths, c(1978, 1), c(1978, 12)) fit <- arima(train, order = c(0, 1, 1), seasonal = list(order = c(0, 1, 1))) fcast1 <- forecast(fit, 12) xyplot(fcast1, test,   grid = TRUE, auto.key = list(corner = c(0, 0.99)),   ci_key = list(title = \"PI Level\") ) # A fan plot fcast2 <- forecast(fit, 12, level = seq(0, 95, 10)) xyplot(fcast2, test, ci_pal = heat.colors(100))"},{"path":"https://jolars.github.io/tactile/articles/new-panel-functions.html","id":"panel-ci-confidence-intervals","dir":"Articles","previous_headings":"","what":"panel.ci(): confidence intervals","title":"New panel functions","text":"panel.ci() adds confidence bands around line using arguments lower upper. usually interested , instance, fitted model made predictions using model. example, try predict petal width petal length species, using iris dataset. predicted values across grid, now plot predictions, including 95% confidence levels using following lines. Example using panel.ci. Also note use prepanel.ci() function provide prepanel argument axis limits set properly.","code":"mod <- lm(Petal.Width ~ Petal.Length * Species, data = iris) newdat <- expand.grid(   Petal.Length = seq(1, 7, by = 0.1),   Species = c(\"setosa\", \"versicolor\", \"virginica\") ) pred <- predict(mod, newdat, interval = \"confidence\") dd <- cbind(newdat, pred) library(tactile) #> Loading required package: lattice xyplot(fit ~ Petal.Length,   groups = Species, data = dd,   prepanel = prepanel.ci, auto.key = list(lines = TRUE, points = FALSE),   ylab = \"Petal Width\",   xlab = \"Petal Length\",   lower = dd$lwr,   upper = dd$upr,   type = \"l\",   panel = function(...) {     panel.ci(..., alpha = 0.15, grid = TRUE)     panel.xyplot(...)   } )"},{"path":"https://jolars.github.io/tactile/articles/new-panel-functions.html","id":"panel-qqmathci-confidence-intervals-for-latticeqqmath","dir":"Articles","previous_headings":"","what":"panel.qqmathci(): confidence intervals for lattice::qqmath()","title":"New panel functions","text":"panel.qqmathci() designed used together lattice::qqmath() lattice::panel.qqmathline() provide confidence intervals theoretical quantities. rather contrived example follows. Example using panel.qqmathci.","code":"qqmath(~ height | voice.part,   aspect = \"xy\", data = singer,   prepanel = prepanel.qqmathline,   distribution = qnorm,   ci = 0.9,   panel = function(x, ...) {     panel.qqmathci(x, ...)     panel.qqmathline(x, ...)     panel.qqmath(x, ...)   } )"},{"path":"https://jolars.github.io/tactile/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Johan Larsson. Author, maintainer. Deepayan Sarkar. Contributor, copyright holder.           lattice Brian Ripley. Contributor.           stats::plot.acf","code":""},{"path":"https://jolars.github.io/tactile/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Larsson J (????). tactile: New Extended Plots, Methods, Panel Functions 'lattice'. R package version 0.2.1, https://cran.r-project.org/package=tactile.","code":"@Manual{,   title = {{tactile}: New and Extended Plots, Methods, and Panel Functions for 'lattice'},   author = {Johan Larsson},   note = {R package version 0.2.1},   url = {https://cran.r-project.org/package=tactile}, }"},{"path":"https://jolars.github.io/tactile/index.html","id":"tactile","dir":"","previous_headings":"","what":"New and Extended Plots, Methods, and Panel Functions for lattice","title":"New and Extended Plots, Methods, and Panel Functions for lattice","text":"tactile R package extends lattice.","code":""},{"path":"https://jolars.github.io/tactile/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"New and Extended Plots, Methods, and Panel Functions for lattice","text":"can install current stable release CRAN development version github running","code":"install.packages(\"tactile\") # install.packages(\"devtools\") devtools::install_github(\"jolars/tactile\")"},{"path":"https://jolars.github.io/tactile/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"New and Extended Plots, Methods, and Panel Functions for lattice","text":"tactile open source software, licensed GPL-3.","code":""},{"path":"https://jolars.github.io/tactile/reference/bubbleplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Bubbleplots — bubbleplot","title":"Bubbleplots — bubbleplot","text":"Draws bubbleblots – trivariate plots third dimension mapped size points drawn screen.","code":""},{"path":"https://jolars.github.io/tactile/reference/bubbleplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bubbleplots — bubbleplot","text":"","code":"bubbleplot(x, data = NULL, ...)  # S3 method for class 'formula' bubbleplot(   x,   data = NULL,   maxsize = 3,   bubblekey = TRUE,   panel = panel.bubbleplot,   groups = NULL,   subset = TRUE,   drop.unused.levels = lattice.getOption(\"drop.unused.levels\"),   ...,   outer,   allow.multiple )"},{"path":"https://jolars.github.io/tactile/reference/bubbleplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bubbleplots — bubbleplot","text":"x formula form z ~ x * y, x y usual interpretation trellis graphics (see lattice::xyplot()) z mapped size bubbles. data data.frame, list environment wherein formula groups arguments can evaluated. ... arguments pass lattice::xyplot(). maxsize Maximum size (cex) bubbles. bubblekey Set TRUE draw informative legend bubbles. Uses lattice::draw.key(). See key section documentation lattice::xyplot(). auto.key bubblekey given space arguments (positions) conflict, bubblekey silently override position auto.key. panel See lattice::xyplot(). , passing additional variable, z, used panel.bubbleplot(). groups See lattice::xyplot() subset See lattice::xyplot() drop.unused.levels See lattice::xyplot() outer Ignored. allow.multiple Ignored.","code":""},{"path":"https://jolars.github.io/tactile/reference/bubbleplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bubbleplots — bubbleplot","text":"object class \"trellis\".   update method can used   update components object   print method (usually called   default) plot appropriate plotting device.","code":""},{"path":"https://jolars.github.io/tactile/reference/bubbleplot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bubbleplots — bubbleplot","text":"Johan Larsson","code":""},{"path":"https://jolars.github.io/tactile/reference/bubbleplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bubbleplots — bubbleplot","text":"","code":"bubbleplot(disp ~ hp * wt, groups = cyl, data = mtcars, auto.key = TRUE)  bubbleplot(disp ~ hp * mpg | factor(cyl), groups = gear, data = mtcars,            auto.key = TRUE)"},{"path":"https://jolars.github.io/tactile/reference/bwplot2.html","id":null,"dir":"Reference","previous_headings":"","what":"An extended box and whiskers plot — bwplot2","title":"An extended box and whiskers plot — bwplot2","text":"extended version lattice::bwplot(). modification group stack box plots groups provided.","code":""},{"path":"https://jolars.github.io/tactile/reference/bwplot2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An extended box and whiskers plot — bwplot2","text":"","code":"bwplot2(x, data = NULL, ...)  # S3 method for class 'formula' bwplot2(   x,   data = NULL,   allow.multiple = is.null(groups) || outer,   outer = FALSE,   auto.key = FALSE,   groups = NULL,   drop.unused.levels = lattice.getOption(\"drop.unused.levels\"),   ...,   subset = TRUE )  # S3 method for class 'numeric' bwplot2(x, data = NULL, xlab = deparse(substitute(x)), ...)"},{"path":"https://jolars.github.io/tactile/reference/bwplot2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An extended box and whiskers plot — bwplot2","text":"x see lattice::bwplot() data see lattice::bwplot() ... arguments passed lattice::bwplot() allow.multiple see lattice::bwplot() outer see lattice::bwplot() auto.key see lattice::bwplot() groups see lattice::bwplot() drop.unused.levels see lattice::bwplot() subset see lattice::bwplot() xlab see lattice::bwplot()","code":""},{"path":"https://jolars.github.io/tactile/reference/bwplot2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An extended box and whiskers plot — bwplot2","text":"object class \"trellis\".   update method can used   update components object   print method (usually called   default) plot appropriate plotting device.","code":""},{"path":"https://jolars.github.io/tactile/reference/bwplot2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An extended box and whiskers plot — bwplot2","text":"","code":"bwplot2(variety ~ yield,         groups = site,         data = barley,         par.settings = tactile.theme())"},{"path":"https://jolars.github.io/tactile/reference/diag.panel.splom.density.html","id":null,"dir":"Reference","previous_headings":"","what":"Diagonal Density Panels — diag.panel.splom.density","title":"Diagonal Density Panels — diag.panel.splom.density","text":"Plots univariate density estimates estimates used lattice::splom() call diag.panel argument.","code":""},{"path":"https://jolars.github.io/tactile/reference/diag.panel.splom.density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diagonal Density Panels — diag.panel.splom.density","text":"","code":"diag.panel.splom.density(   x,   bw = \"nrd0\",   adjust = 1,   kernel = \"gaussian\",   weights = NULL,   n = 512,   ... )"},{"path":"https://jolars.github.io/tactile/reference/diag.panel.splom.density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diagonal Density Panels — diag.panel.splom.density","text":"x data vector corresponding row / column (diagonal 'panels'). bw smoothing bandwidth used.  kernels scaled     standard deviation smoothing kernel.     (Note differs reference books cited .) bw can also character string giving rule choose     bandwidth.  See bw.nrd.  default,     \"nrd0\", remained default historical     compatibility reasons, rather general recommendation,     e.g., \"SJ\" rather fit, see also     Venables Ripley (2002). specified (computed) value bw multiplied     adjust. adjust bandwidth used actually adjust*bw.     makes easy specify values like ‘half default’     bandwidth. kernel smoothing kernel used. See stats::density() options. weights numeric vector non-negative observation weights,     hence length x. default NULL     equivalent weights = rep(1/nx, nx) nx     length (finite entries ) x[].  na.rm = TRUE     NA's x,     corresponding weights removed computations.  case,     original weights summed one, re-scaled     keep . Note weights taken account automatic     bandwidth rules, .e., bw string.  weights     proportional true counts cn, density(x = rep(x, cn))     may used instead weights. n number equally spaced points density     estimated.  n > 512, rounded power     2 calculations (fft used)     final result interpolated approx.  almost     always makes sense specify n power two. ... arguments passed lattice::diag.panel.splom() lattice::panel.lines().","code":""},{"path":[]},{"path":"https://jolars.github.io/tactile/reference/diag.panel.splom.density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diagonal Density Panels — diag.panel.splom.density","text":"","code":"splom(~ iris[1:4],   data = iris,   diag.panel = diag.panel.splom.density,   pscales = 0 )"},{"path":"https://jolars.github.io/tactile/reference/dont_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Suppress Plotting — dont_plot","title":"Suppress Plotting — dont_plot","text":"Suppress Plotting","code":""},{"path":"https://jolars.github.io/tactile/reference/dont_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Suppress Plotting — dont_plot","text":"","code":"dont_plot(x, ...)"},{"path":"https://jolars.github.io/tactile/reference/dont_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Suppress Plotting — dont_plot","text":"x Object call graphics::plot() .","code":""},{"path":"https://jolars.github.io/tactile/reference/dont_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Suppress Plotting — dont_plot","text":"Invisibly returns whatever plot(x) normally returns, plot anything (point).","code":""},{"path":"https://jolars.github.io/tactile/reference/feldspar.html","id":null,"dir":"Reference","previous_headings":"","what":"Ternary feldspar experiments and thermodynamic models — feldspar","title":"Ternary feldspar experiments and thermodynamic models — feldspar","text":"data set manually transcribed Table 5 Elkins Grove's Ternary feldspar experiments thermodynamic models.","code":""},{"path":"https://jolars.github.io/tactile/reference/feldspar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ternary feldspar experiments and thermodynamic models — feldspar","text":"","code":"feldspar"},{"path":"https://jolars.github.io/tactile/reference/feldspar.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Ternary feldspar experiments and thermodynamic models — feldspar","text":"data frame 40 rows 7 columns: Experiment ID experiment Feldspar Coexisting feldspars, Alkali Plagioclase Proportion orthoclase Proportion anorthite Ab Proportion albite Temperature Temperature reaction (degrees centigrade) Pressure Pressure reaction (bars)","code":""},{"path":"https://jolars.github.io/tactile/reference/feldspar.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Ternary feldspar experiments and thermodynamic models — feldspar","text":"Elkins LT, Grove TL. Ternary feldspar experiments thermodynamic models. American Mineralogist. 1990;75(5-6):544-59.","code":""},{"path":"https://jolars.github.io/tactile/reference/feldspar.html","id":"abstract","dir":"Reference","previous_headings":"","what":"Abstract","title":"Ternary feldspar experiments and thermodynamic models — feldspar","text":"paper reports results 20 experiments mixes two three feldspars reacted produce coexisting plagioclase feldspar (PF) alkali feldspar (AF). Starting materials similar bulk compositions prepared using different combinations two three minerals, experiments designed produce similar AF PF minerals experimental products different starting binary ternary compositions. coexisting AF PF compositions produced products define compositional fields elongate parallel ternary solvus. 11 experiments reaction sufficient product fields coexisting AF PF, AF, PF, melt bulk composition close starting mixture. six experiments significant reaction occurred form reaction rim overgrowths seeds starting materials. Three experiments produced AF, PF, melt natural granite starting material. two-feldspar thermometer presented temperature constrained equilibria among three components - Albite, Orthoclase, Anorthite - coexisting ternary feldspars.","code":""},{"path":"https://jolars.github.io/tactile/reference/get_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a Function by Name or Definition — get_fun","title":"Retrieve a Function by Name or Definition — get_fun","text":"Retrieve Function Name Definition","code":""},{"path":"https://jolars.github.io/tactile/reference/get_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a Function by Name or Definition — get_fun","text":"","code":"get_fun(fun)"},{"path":"https://jolars.github.io/tactile/reference/get_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a Function by Name or Definition — get_fun","text":"fun Character function.","code":""},{"path":"https://jolars.github.io/tactile/reference/grid_wrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper for grid.arrange — grid_wrap","title":"Wrapper for grid.arrange — grid_wrap","text":"Wrapper grid.arrange","code":""},{"path":"https://jolars.github.io/tactile/reference/grid_wrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper for grid.arrange — grid_wrap","text":"","code":"grid_wrap(x, layout = NULL)"},{"path":"https://jolars.github.io/tactile/reference/grid_wrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper for grid.arrange — grid_wrap","text":"x List trellis objects. layout layout matrix vector specifying rows columns","code":""},{"path":"https://jolars.github.io/tactile/reference/grid_wrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper for grid.arrange — grid_wrap","text":"list trellis objects.","code":""},{"path":"https://jolars.github.io/tactile/reference/make_bubbles.html","id":null,"dir":"Reference","previous_headings":"","what":"Make Bubbles — make_bubbles","title":"Make Bubbles — make_bubbles","text":"Map z area bubbles.","code":""},{"path":"https://jolars.github.io/tactile/reference/make_bubbles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make Bubbles — make_bubbles","text":"","code":"make_bubbles(x, maxsize)"},{"path":"https://jolars.github.io/tactile/reference/make_bubbles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make Bubbles — make_bubbles","text":"x numeric vector. maxsize max size (cex) bubbles.","code":""},{"path":"https://jolars.github.io/tactile/reference/make_bubbles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make Bubbles — make_bubbles","text":"list new bubbles well pretty breakpoints along respective cex values.","code":""},{"path":"https://jolars.github.io/tactile/reference/panel.bubbleplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Panel Function for Bubble Plots — panel.bubbleplot","title":"Panel Function for Bubble Plots — panel.bubbleplot","text":"Panel Function Bubble Plots","code":""},{"path":"https://jolars.github.io/tactile/reference/panel.bubbleplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Panel Function for Bubble Plots — panel.bubbleplot","text":"","code":"panel.bubbleplot(x, y, z, groups = NULL, subscripts, cex = NULL, ...)"},{"path":"https://jolars.github.io/tactile/reference/panel.bubbleplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Panel Function for Bubble Plots — panel.bubbleplot","text":"x, y variables plotted scatterplot z numeric vector areas circles mapped . groups Grouping variable (see lattice::xyplot()). subscripts vector indexes specify observation plot. Normally need provided user. cex used internally user settings ignored. ... arguments pass lattice::panel.xyplot().","code":""},{"path":"https://jolars.github.io/tactile/reference/panel.bubbleplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Panel Function for Bubble Plots — panel.bubbleplot","text":"Plots layer inside panel lattice plot.","code":""},{"path":"https://jolars.github.io/tactile/reference/panel.ci.html","id":null,"dir":"Reference","previous_headings":"","what":"Panel function for confidence interval — panel.ci","title":"Panel function for confidence interval — panel.ci","text":"Panel function confidence interval","code":""},{"path":"https://jolars.github.io/tactile/reference/panel.ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Panel function for confidence interval — panel.ci","text":"","code":"panel.ci(   x,   y,   lower,   upper,   groups = NULL,   subscripts,   col,   fill = if (is.null(groups)) plot.line$col else superpose.line$col,   alpha = 0.15,   lty = 0,   lwd = if (is.null(groups)) plot.line$lwd else superpose.line$lwd,   grid = FALSE,   ...,   col.line = if (is.null(groups)) plot.line$col else superpose.line$col )"},{"path":"https://jolars.github.io/tactile/reference/panel.ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Panel function for confidence interval — panel.ci","text":"x, y variables plotted scatterplot lower lower confidence limits upper upper confidence limits groups optional grouping variable.  present,     panel.superpose used instead display     subgroup subscripts see lattice::xyplot() col line color fill fill color alpha opacity fill lty line type lwd line width grid logical flag, character string, list specifying whether     background grid drawn.  provides     functionality type=\"g\", preferred alternative     effect type=\"g\" conceptually different     type values (data-dependent).  Using     grid argument also allows flexibility. generally, grid can list arguments     supplied panel.grid, called     arguments.  Three shortcuts available: TRUE: roughly equivalent list(h = -1, v = -1) \"h\": roughly equivalent list(h = -1, v = 0) \"v\": roughly equivalent list(h = 0, v = -1) grid drawn grid = FALSE. ... Extra arguments, , panel.xyplot.  Usually passed     graphical parameters low level plotting functions,     panel functions performing smoothing, applicable. col.line line color. Supersedes col specified.","code":""},{"path":"https://jolars.github.io/tactile/reference/panel.ci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Panel function for confidence interval — panel.ci","text":"","code":"mod <- lm(Petal.Width ~ Petal.Length * Species, data = iris) newdat <- expand.grid(   Petal.Length = seq(1, 7, by = 0.1),   Species = c(\"setosa\", \"versicolor\", \"virginica\") ) pred <- predict(mod, newdat, interval = \"confidence\") dd <- cbind(newdat, pred)  xyplot(   fit ~ Petal.Length,   groups = Species, data = dd,   prepanel = prepanel.ci, auto.key = list(lines = TRUE, points = FALSE),   ylab = \"Petal Width\",   xlab = \"Petal Length\",   lower = dd$lwr, upper = dd$upr, type = \"l\",   panel = function(...) {     panel.ci(..., alpha = 0.15, grid = TRUE)     panel.xyplot(...)   } )"},{"path":"https://jolars.github.io/tactile/reference/panel.qqmathci.html","id":null,"dir":"Reference","previous_headings":"","what":"Q-Q Diagram Confidence Intervals Panels — panel.qqmathci","title":"Q-Q Diagram Confidence Intervals Panels — panel.qqmathci","text":"Panel function go along lattice::qqmath() lattice::panel.qqmathline(). Adds filled confidence bands Q-Q-plot.","code":""},{"path":"https://jolars.github.io/tactile/reference/panel.qqmathci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Q-Q Diagram Confidence Intervals Panels — panel.qqmathci","text":"","code":"panel.qqmathci(   x,   y = x,   distribution = qnorm,   probs = c(0.25, 0.75),   qtype = 7,   groups = NULL,   ci = 0.95,   alpha = 0.25,   col = trellis.par.get(\"plot.line\")$col,   ...,   col.line )"},{"path":"https://jolars.github.io/tactile/reference/panel.qqmathci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Q-Q Diagram Confidence Intervals Panels — panel.qqmathci","text":"x original sample, possibly reduced fewer number     quantiles, determined f.value argument     qqmath y alias x backwards compatibility distribution quantile function reference theoretical distribution. probs numeric vector length two, representing probabilities.     Corresponding quantile pairs define line drawn. qtype type quantile computation used     quantile groups optional grouping variable.  non-null, line drawn     group. ci Confidence level alpha Alpha level color fill col Color fill confidence bands. ... Arguments passed lattice::panel.superpose() lattice::panel.polygon() col.line Color fill confidence bands. used internally lattice::panel.superpose() generally changed.","code":""},{"path":"https://jolars.github.io/tactile/reference/panel.qqmathci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Q-Q Diagram Confidence Intervals Panels — panel.qqmathci","text":"Augments trellis plot panel, created lattice::qqmath(), confidence levels.","code":""},{"path":"https://jolars.github.io/tactile/reference/panel.qqmathci.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Q-Q Diagram Confidence Intervals Panels — panel.qqmathci","text":"function tries figure density function counterpart provided argument distribution regular expressions.","code":""},{"path":[]},{"path":"https://jolars.github.io/tactile/reference/panel.qqmathci.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Q-Q Diagram Confidence Intervals Panels — panel.qqmathci","text":"Johan Larsson.","code":""},{"path":"https://jolars.github.io/tactile/reference/panel.qqmathci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Q-Q Diagram Confidence Intervals Panels — panel.qqmathci","text":"","code":"qqmath(~ height | voice.part, aspect = \"xy\", data = singer,        prepanel = prepanel.qqmathline,        panel = function(x, ...) {          panel.qqmathci(x, ...)          panel.qqmathline(x, ...)          panel.qqmath(x, ...)        })"},{"path":"https://jolars.github.io/tactile/reference/panel.ternaryplot.clip.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Region Clipping for Ternary Plots — panel.ternaryplot.clip","title":"Plot Region Clipping for Ternary Plots — panel.ternaryplot.clip","text":"Plot Region Clipping Ternary Plots","code":""},{"path":"https://jolars.github.io/tactile/reference/panel.ternaryplot.clip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Region Clipping for Ternary Plots — panel.ternaryplot.clip","text":"","code":"panel.ternaryplot.clip(   xl = current.panel.limits()$x,   yl = current.panel.limits()$y,   border = \"transparent\",   col = if (background$col == \"transparent\") \"#FFFFFF\" else background$col )"},{"path":"https://jolars.github.io/tactile/reference/panel.ternaryplot.clip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Region Clipping for Ternary Plots — panel.ternaryplot.clip","text":"xl X axis limits yl Y axis limits border Border color col Polygon fill","code":""},{"path":"https://jolars.github.io/tactile/reference/panel.ternaryplot.clip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Region Clipping for Ternary Plots — panel.ternaryplot.clip","text":"Plots layer inside panel lattice plot.","code":""},{"path":"https://jolars.github.io/tactile/reference/panel.ternaryplot.density.html","id":null,"dir":"Reference","previous_headings":"","what":"Two-Dimensional Density Estimation for Ternary Plots — panel.ternaryplot.density","title":"Two-Dimensional Density Estimation for Ternary Plots — panel.ternaryplot.density","text":"Two-Dimensional Density Estimation Ternary Plots","code":""},{"path":"https://jolars.github.io/tactile/reference/panel.ternaryplot.density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Two-Dimensional Density Estimation for Ternary Plots — panel.ternaryplot.density","text":"","code":"panel.ternaryplot.density(   x,   y,   z,   subscripts,   n = 100,   region = TRUE,   contour = FALSE,   labels = isTRUE(contour),   density_breaks = NULL,   ... )"},{"path":"https://jolars.github.io/tactile/reference/panel.ternaryplot.density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Two-Dimensional Density Estimation for Ternary Plots — panel.ternaryplot.density","text":"x Numeric vector y Numeric vector z Numeric vector subscripts See lattice::panel.xyplot(). n Number grid points direction.  Can scalar length-2 integer vector. region Fill density response estimates color gradient. contour Draw contour lines density response estimates. labels Label contour lines. density_breaks Breaks density plot used (see panel.ternaryplot.density()). ... Arguments passed lattice::panel.lines(), lattice::panel.polygon(), lattice::panel.text().","code":""},{"path":"https://jolars.github.io/tactile/reference/panel.ternaryplot.density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Two-Dimensional Density Estimation for Ternary Plots — panel.ternaryplot.density","text":"Plots layer inside panel lattice plot.","code":""},{"path":"https://jolars.github.io/tactile/reference/panel.ternaryplot.grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Reference Grid for Ternary Plot — panel.ternaryplot.grid","title":"Reference Grid for Ternary Plot — panel.ternaryplot.grid","text":"Reference Grid Ternary Plot","code":""},{"path":"https://jolars.github.io/tactile/reference/panel.ternaryplot.grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reference Grid for Ternary Plot — panel.ternaryplot.grid","text":"","code":"panel.ternaryplot.grid(   at = seq.int(0, 1, by = 0.2),   alpha = reference.line$alpha,   col = reference.line$col,   lty = reference.line$lty,   lwd = reference.line$lwd )"},{"path":"https://jolars.github.io/tactile/reference/panel.ternaryplot.grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reference Grid for Ternary Plot — panel.ternaryplot.grid","text":"draw reference lines alpha Alpha col Color lty Line type lwd Line weight","code":""},{"path":"https://jolars.github.io/tactile/reference/panel.ternaryplot.grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reference Grid for Ternary Plot — panel.ternaryplot.grid","text":"Plots layer inside panel lattice plot.","code":""},{"path":"https://jolars.github.io/tactile/reference/panel.ternaryplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Panel Function for Ternary Plots — panel.ternaryplot","title":"Panel Function for Ternary Plots — panel.ternaryplot","text":"Panel Function Ternary Plots","code":""},{"path":"https://jolars.github.io/tactile/reference/panel.ternaryplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Panel Function for Ternary Plots — panel.ternaryplot","text":"","code":"panel.ternaryplot(   x,   y,   z,   subscripts,   response = NULL,   density = FALSE,   region = density || !is.null(response),   contour = density || !is.null(response),   labels = !is.null(response),   points = TRUE,   grid = TRUE,   density_breaks = NULL,   xlab,   ylab,   zlab,   xlab.default,   ylab.default,   zlab.default,   ... )"},{"path":"https://jolars.github.io/tactile/reference/panel.ternaryplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Panel Function for Ternary Plots — panel.ternaryplot","text":"x Numeric vector y Numeric vector z Numeric vector subscripts See lattice::panel.xyplot(). response optional response variable density Compute two-dimensional density estimates via MASS::kde2d(). region Fill density response estimates color gradient. contour Draw contour lines density response estimates. labels Label contour lines. points Draw points (via panel.ternaryplot.xyplot()). grid Draw reference grid. density_breaks Breaks density plot used (see panel.ternaryplot.density()). xlab X axis label (left dimension) ylab Y axis label (right dimension) zlab Z axis label (top dimension) xlab.default Internal argument ylab.default Internal argument zlab.default Internal argument ... Arguments passed subsequent panel functions.","code":""},{"path":"https://jolars.github.io/tactile/reference/panel.ternaryplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Panel Function for Ternary Plots — panel.ternaryplot","text":"Plots layer inside panel lattice plot.","code":""},{"path":[]},{"path":"https://jolars.github.io/tactile/reference/panel.ternaryplot.response.html","id":null,"dir":"Reference","previous_headings":"","what":"Response Panels for Ternary Plots — panel.ternaryplot.response","title":"Response Panels for Ternary Plots — panel.ternaryplot.response","text":"Response Panels Ternary Plots","code":""},{"path":"https://jolars.github.io/tactile/reference/panel.ternaryplot.response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Response Panels for Ternary Plots — panel.ternaryplot.response","text":"","code":"panel.ternaryplot.response(   x,   y,   z,   subscripts,   response,   region = TRUE,   contour = TRUE,   labels = isTRUE(contour),   fun = c(\"glm\", \"lm\"),   formula = response ~ poly(x, y),   ... )"},{"path":"https://jolars.github.io/tactile/reference/panel.ternaryplot.response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Response Panels for Ternary Plots — panel.ternaryplot.response","text":"x Numeric vector y Numeric vector z Numeric vector subscripts See lattice::panel.xyplot(). response optional response variable region Fill density response estimates color gradient. contour Draw contour lines density response estimates. labels Label contour lines. fun Function apply response variable. formula Formula function. ... Arguments passed lattice::panel.lines(), lattice::panel.polygon(), lattice::panel.text().","code":""},{"path":"https://jolars.github.io/tactile/reference/panel.ternaryplot.response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Response Panels for Ternary Plots — panel.ternaryplot.response","text":"Plots layer inside panel lattice plot.","code":""},{"path":"https://jolars.github.io/tactile/reference/panel.ternaryplot.scales.html","id":null,"dir":"Reference","previous_headings":"","what":"Axes and Labels for Ternary Plots — panel.ternaryplot.scales","title":"Axes and Labels for Ternary Plots — panel.ternaryplot.scales","text":"Axes Labels Ternary Plots","code":""},{"path":"https://jolars.github.io/tactile/reference/panel.ternaryplot.scales.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Axes and Labels for Ternary Plots — panel.ternaryplot.scales","text":"","code":"panel.ternaryplot.scales(   xlab,   ylab,   zlab,   xlab.default,   ylab.default,   zlab.default,   at = seq.int(0, 1, by = 0.2),   ... )"},{"path":"https://jolars.github.io/tactile/reference/panel.ternaryplot.scales.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Axes and Labels for Ternary Plots — panel.ternaryplot.scales","text":"xlab, ylab, zlab Labels, lists. Typically user manipulate     , instead control via arguments cloud     directly. xlab.default internal use ylab.default internal use zlab.default internal use draw tick marks. ... Currently ignored.","code":""},{"path":"https://jolars.github.io/tactile/reference/panel.ternaryplot.scales.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Axes and Labels for Ternary Plots — panel.ternaryplot.scales","text":"Plots layer inside panel lattice plot.","code":""},{"path":"https://jolars.github.io/tactile/reference/panel.ternaryplot.xyplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Ternary Plot Wrapper for lattice::xyplot — panel.ternaryplot.xyplot","title":"Ternary Plot Wrapper for lattice::xyplot — panel.ternaryplot.xyplot","text":"mainly exists enable users string together ternary plot functions.","code":""},{"path":"https://jolars.github.io/tactile/reference/panel.ternaryplot.xyplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ternary Plot Wrapper for lattice::xyplot — panel.ternaryplot.xyplot","text":"","code":"panel.ternaryplot.xyplot(x, y, z, subscripts, ...)"},{"path":"https://jolars.github.io/tactile/reference/panel.ternaryplot.xyplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ternary Plot Wrapper for lattice::xyplot — panel.ternaryplot.xyplot","text":"x Numeric vector values original space y Numeric vector values original space z Numeric vector values original space subscripts see lattice::xyplot(). ... Arguments passed lattice::panel.xyplot().","code":""},{"path":"https://jolars.github.io/tactile/reference/panel.ternaryplot.xyplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ternary Plot Wrapper for lattice::xyplot — panel.ternaryplot.xyplot","text":"Plots layer inside panel lattice plot.","code":""},{"path":"https://jolars.github.io/tactile/reference/prepanel.ci.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepanel for ciplot — prepanel.ci","title":"Prepanel for ciplot — prepanel.ci","text":"Prepanel ciplot","code":""},{"path":"https://jolars.github.io/tactile/reference/prepanel.ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepanel for ciplot — prepanel.ci","text":"","code":"prepanel.ci(x, y, lower, upper, subscripts, groups = NULL, ...)"},{"path":"https://jolars.github.io/tactile/reference/prepanel.ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepanel for ciplot — prepanel.ci","text":"x, y x y values, numeric factor lower lower confidence limits upper upper confidence limits groups, subscripts See xyplot.  Whenever     appropriate, calculations done separately group     combined. ... arguments, usually ignored","code":""},{"path":"https://jolars.github.io/tactile/reference/prepanel.ci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepanel for ciplot — prepanel.ci","text":"","code":"mod <- lm(Petal.Width ~ Petal.Length * Species, data = iris) newdat <- expand.grid(   Petal.Length = seq(1, 7, by = 0.1),   Species = c(\"setosa\", \"versicolor\", \"virginica\") ) pred <- predict(mod, newdat, interval = \"confidence\") dd <- cbind(newdat, pred)  xyplot(   fit ~ Petal.Length,   groups = Species, data = dd,   prepanel = prepanel.ci,   ylab = \"Petal Width\",   xlab = \"Petal Length\",   lower = dd$lwr, upper = dd$upr, alpha = 0.3,   panel = function(...) {     panel.ci(..., grid = TRUE)     panel.xyplot(type = \"l\", ...)   } )"},{"path":"https://jolars.github.io/tactile/reference/qqmath.zoo.html","id":null,"dir":"Reference","previous_headings":"","what":"Q-Q Plots for Zoo Objects — qqmath.zoo","title":"Q-Q Plots for Zoo Objects — qqmath.zoo","text":"Draw quantile-Quantile plots sample theoretical distribution, possibly conditioned variables.","code":""},{"path":"https://jolars.github.io/tactile/reference/qqmath.zoo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Q-Q Plots for Zoo Objects — qqmath.zoo","text":"","code":"# S3 method for class 'zoo' qqmath(   x,   data = NULL,   xlab = \"Theoretical quantiles\",   ylab = \"Sample quantiles\",   ref = TRUE,   ci = TRUE,   ... )"},{"path":"https://jolars.github.io/tactile/reference/qqmath.zoo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Q-Q Plots for Zoo Objects — qqmath.zoo","text":"x zoo object data Ignored xlab X axis label ylab Y axis label ref Plot reference line via lattice::panel.qqmathline(). ci Plot confidence levels via panel.qqmathci(). ... Parameters pass lattice::qqmath().","code":""},{"path":"https://jolars.github.io/tactile/reference/qqmath.zoo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Q-Q Plots for Zoo Objects — qqmath.zoo","text":"Plots returns trellis object.","code":""},{"path":[]},{"path":"https://jolars.github.io/tactile/reference/qqmath.zoo.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Q-Q Plots for Zoo Objects — qqmath.zoo","text":"Original Deepayan Sarkar.","code":""},{"path":"https://jolars.github.io/tactile/reference/qqmath.zoo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Q-Q Plots for Zoo Objects — qqmath.zoo","text":"","code":"if (require(zoo))   qqmath(zoo(lh)) #> Loading required package: zoo #>  #> Attaching package: ‘zoo’ #> The following objects are masked from ‘package:base’: #>  #>     as.Date, as.Date.numeric"},{"path":"https://jolars.github.io/tactile/reference/require_pkg.html","id":null,"dir":"Reference","previous_headings":"","what":"Throw An Error if A Required Package Is Unavailable — require_pkg","title":"Throw An Error if A Required Package Is Unavailable — require_pkg","text":"Throw Error Required Package Unavailable","code":""},{"path":"https://jolars.github.io/tactile/reference/require_pkg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Throw An Error if A Required Package Is Unavailable — require_pkg","text":"","code":"require_pkg(pkg)"},{"path":"https://jolars.github.io/tactile/reference/require_pkg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Throw An Error if A Required Package Is Unavailable — require_pkg","text":"pkg required package","code":""},{"path":"https://jolars.github.io/tactile/reference/require_pkg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Throw An Error if A Required Package Is Unavailable — require_pkg","text":"error package namespace available.","code":""},{"path":"https://jolars.github.io/tactile/reference/rescale.html","id":null,"dir":"Reference","previous_headings":"","what":"Uniform Rescaling — rescale","title":"Uniform Rescaling — rescale","text":"Uniform Rescaling","code":""},{"path":"https://jolars.github.io/tactile/reference/rescale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uniform Rescaling — rescale","text":"","code":"rescale(   x,   new_min = 0,   new_max = 1,   old_min = min(x, na.rm = TRUE),   old_max = max(x, na.rm = TRUE) )"},{"path":"https://jolars.github.io/tactile/reference/rescale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uniform Rescaling — rescale","text":"x numeric vector rescale new_min New min new_max New max old_min Old min old_max Old max","code":""},{"path":"https://jolars.github.io/tactile/reference/rescale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uniform Rescaling — rescale","text":"rescaled version x.","code":""},{"path":"https://jolars.github.io/tactile/reference/seq_pal.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequential palette helper. — seq_pal","title":"Sequential palette helper. — seq_pal","text":"Divides regions palette lattice half make sense diverging palette.","code":""},{"path":"https://jolars.github.io/tactile/reference/seq_pal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequential palette helper. — seq_pal","text":"","code":"seq_pal(n, bias = 1, space = \"Lab\", ...)"},{"path":"https://jolars.github.io/tactile/reference/seq_pal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequential palette helper. — seq_pal","text":"n Number colors generate ... Stuff pass grDevices::colorRampPalette()","code":""},{"path":"https://jolars.github.io/tactile/reference/setup_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Key Setup — setup_key","title":"Key Setup — setup_key","text":"Try setup key also dodging existing keys","code":""},{"path":"https://jolars.github.io/tactile/reference/setup_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Key Setup — setup_key","text":"","code":"setup_key(   legend,   key,   default_key,   fun,   pos = c(\"right\", \"top\", \"bottom\", \"left\") )"},{"path":"https://jolars.github.io/tactile/reference/setup_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Key Setup — setup_key","text":"legend list legends, usually $legend slot trellis object. key key specification, usually user input. default_key default key specifications may overridden user. fun function draw key, lattice::draw.colorkey(). pos Preferences position new key.","code":""},{"path":"https://jolars.github.io/tactile/reference/setup_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Key Setup — setup_key","text":"original legend object addition key defined key, default_key, fun.","code":""},{"path":"https://jolars.github.io/tactile/reference/tactile-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tactile: New and Extended Plots, Methods, and Panel Functions for 'lattice' — tactile-package","title":"tactile: New and Extended Plots, Methods, and Panel Functions for 'lattice' — tactile-package","text":"Extensions 'lattice', providing new high-level functions, methods existing functions, panel functions, theme.","code":""},{"path":[]},{"path":"https://jolars.github.io/tactile/reference/tactile-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tactile: New and Extended Plots, Methods, and Panel Functions for 'lattice' — tactile-package","text":"Maintainer: Johan Larsson johanlarsson@outlook.com (ORCID) contributors: Deepayan Sarkar (lattice) [contributor, copyright holder] Brian Ripley (stats::plot.acf) [contributor]","code":""},{"path":"https://jolars.github.io/tactile/reference/tactile.theme.html","id":null,"dir":"Reference","previous_headings":"","what":"Tactile Theme — tactile.theme","title":"Tactile Theme — tactile.theme","text":"custom theme lattice tries make away (author's opinion) excessive margins result default settings. also provides different color theme based partly latticeExtra::custom.theme().","code":""},{"path":"https://jolars.github.io/tactile/reference/tactile.theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tactile Theme — tactile.theme","text":"","code":"tactile.theme(fontsize = c(12, 8), color = TRUE, ...)"},{"path":"https://jolars.github.io/tactile/reference/tactile.theme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tactile Theme — tactile.theme","text":"fontsize vector two numeric scalars text symbols respectively. color Colorized theme. ... Additional named options.","code":""},{"path":"https://jolars.github.io/tactile/reference/tactile.theme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tactile Theme — tactile.theme","text":"list graphical parameters instance supplied inside call lattice::xyplot() set via lattice::lattice.options().","code":""},{"path":"https://jolars.github.io/tactile/reference/tactile.theme.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tactile Theme — tactile.theme","text":"theme currently modifies default lattice theme paddings (margins) minimized, axis tick lengths halved, title size decreased slightly.","code":""},{"path":"https://jolars.github.io/tactile/reference/tactile.theme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tactile Theme — tactile.theme","text":"","code":"xyplot(speed ~ dist, data = cars, par.settings = tactile.theme())  opars <- trellis.par.get() trellis.par.set(tactile.theme()) show.settings()  trellis.par.set(opars)"},{"path":"https://jolars.github.io/tactile/reference/ternaryplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Ternary Plot — ternaryplot","title":"Ternary Plot — ternaryplot","text":"ternary plot triangular diagram displays proportions three variables. can used map three-dimensional data two-dimensional surface caveat data's original scales lost (unless proportional data begin ).#'","code":""},{"path":"https://jolars.github.io/tactile/reference/ternaryplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ternary Plot — ternaryplot","text":"","code":"ternaryplot(x, data, ...)  # S3 method for class 'formula' ternaryplot(   x,   data = NULL,   response = NULL,   groups = NULL,   density = FALSE,   region = density || !is.null(response),   contour = density || !is.null(response),   labels = !is.null(response),   colorkey = region,   xlab,   ylab,   zlab,   xlim = c(-0.15, 1.15),   ylim = c(-0.3, 1),   panel = panel.ternaryplot,   default.prepanel = lattice.getOption(\"prepanel.default.xyplot\"),   drop.unused.levels = lattice.getOption(\"drop.unused.levels\"),   subset = TRUE,   ... )  # S3 method for class 'data.frame' ternaryplot(x, data = NULL, ...)  # S3 method for class 'matrix' ternaryplot(x, data = NULL, ...)"},{"path":"https://jolars.github.io/tactile/reference/ternaryplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ternary Plot — ternaryplot","text":"x See Methods (class). data data frame formula, groups, conditioning variables evaluated. ... Arguments passed methods, particularly panel.ternaryplot(). response optional response variable groups variable expression evaluated data used distinguish groups varying graphical parameters. density Compute two-dimensional density estimates via MASS::kde2d(). region Fill density response estimates color gradient. contour Draw contour lines density response estimates. labels Label contour lines. colorkey TRUE automatically computes colorkey density response estimates. Can also list (see lattice::levelplot() details ). xlab X axis label (left dimension) ylab Y axis label (right dimension) zlab Z axis label (top dimension) xlim X limits plot region. ylim Y limits plot region. panel panel function. default.prepanel default prepanel function. drop.unused.levels Drop unused conditioning groups levels. subset expression evaluates logical integer indexing vector. Like groups, evaluated data. resulting rows data used plot.","code":""},{"path":"https://jolars.github.io/tactile/reference/ternaryplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ternary Plot — ternaryplot","text":"object class \"trellis\".   update method can used   update components object   print method (usually called   default) plot appropriate plotting device.","code":""},{"path":"https://jolars.github.io/tactile/reference/ternaryplot.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Ternary Plot — ternaryplot","text":"ternaryplot(formula): formula form top ~ left * right. Variables evaluated inside data provided. ternaryplot(data.frame): data frame first three columns mapped left, right, top dimensions ternary plot respectively. ternaryplot(matrix): matrix first three columns mapped left, right, top dimensions ternary plot respectively.","code":""},{"path":"https://jolars.github.io/tactile/reference/ternaryplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ternary Plot — ternaryplot","text":"","code":"ternaryplot(Fertility ~ Agriculture * Catholic, data = swiss)  ternaryplot(Catholic ~ Examination * Education, response = Infant.Mortality,             data = swiss, contour = FALSE)   ternaryplot(Or ~ An * Ab | Feldspar, data = feldspar)   ternaryplot(Or ~ An * Ab, groups = Feldspar, data = feldspar, density = TRUE)"},{"path":"https://jolars.github.io/tactile/reference/updateList.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a List with User Input — updateList","title":"Update a List with User Input — updateList","text":"Wrapper utils::modifyList().","code":""},{"path":"https://jolars.github.io/tactile/reference/updateList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a List with User Input — updateList","text":"","code":"updateList(x, val)"},{"path":"https://jolars.github.io/tactile/reference/updateList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a List with User Input — updateList","text":"x list updated. val Stuff update x .","code":""},{"path":"https://jolars.github.io/tactile/reference/updateList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update a List with User Input — updateList","text":"Returns updated list.","code":""},{"path":[]},{"path":"https://jolars.github.io/tactile/reference/xyplot.Arima.html","id":null,"dir":"Reference","previous_headings":"","what":"Diagnostic Plots for ARIMA Models — xyplot.Arima","title":"Diagnostic Plots for ARIMA Models — xyplot.Arima","text":"Diagnostic plots modelled stats::tsdiag() modifications corrections p-values Box–Ljung test.","code":""},{"path":"https://jolars.github.io/tactile/reference/xyplot.Arima.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diagnostic Plots for ARIMA Models — xyplot.Arima","text":"","code":"# S3 method for class 'Arima' xyplot(   x,   data = NULL,   which = 1:4,   lag.max = NULL,   gof.lag = NULL,   qq.aspect = \"iso\",   na.action = na.pass,   main = NULL,   layout = NULL,   ... )"},{"path":"https://jolars.github.io/tactile/reference/xyplot.Arima.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diagnostic Plots for ARIMA Models — xyplot.Arima","text":"x fitted time-series model class Arima. data Ignored sequence integers 1 4, identifying plots shown. lag.max Number lags compute ACF . gof.lag maximum number lags Ljung–Box test. qq.aspect Aspect Q-Q plot (see lattice::qqmath()). na.action Treatment NAs. main Optional titles plots. Can also TRUE, case default list titles added. layout Either numeric vector (columns, rows) use call gridExtra::grid.arrange(), layout matrix passed layout_matrix grid.arrange(). ... Parameters pass lattice::xyplot().","code":""},{"path":"https://jolars.github.io/tactile/reference/xyplot.Arima.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diagnostic Plots for ARIMA Models — xyplot.Arima","text":"Plots lattice plot returns trellis object.","code":""},{"path":[]},{"path":"https://jolars.github.io/tactile/reference/xyplot.Arima.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diagnostic Plots for ARIMA Models — xyplot.Arima","text":"","code":"fit <- arima(lh, order = c(1, 1, 0)) xyplot(fit, layout = c(2, 2))  xyplot(fit, which = c(1:2, 4), layout = rbind(c(1, 1), c(2, 3)))"},{"path":"https://jolars.github.io/tactile/reference/xyplot.acf.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Autocovariance and Autocorrelation Functions — xyplot.acf","title":"Plot Autocovariance and Autocorrelation Functions — xyplot.acf","text":"version stats::plot.acf().","code":""},{"path":"https://jolars.github.io/tactile/reference/xyplot.acf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Autocovariance and Autocorrelation Functions — xyplot.acf","text":"","code":"# S3 method for class 'acf' xyplot(   x,   data = NULL,   ci = 0.95,   ci_type = c(\"white\", \"ma\"),   ci_col = trellis.par.get(\"add.line\")$col,   ci_lty = 2,   ... )"},{"path":"https://jolars.github.io/tactile/reference/xyplot.acf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Autocovariance and Autocorrelation Functions — xyplot.acf","text":"x 'acf' object. data Ignored ci Confidence level. ci_type Type confidence level. ci_col Line color confidence levels. ci_lty Line type confidence levels. ... Arguments passed lattice::xyplot().","code":""},{"path":"https://jolars.github.io/tactile/reference/xyplot.acf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Autocovariance and Autocorrelation Functions — xyplot.acf","text":"Returns plots trellis object.","code":""},{"path":[]},{"path":"https://jolars.github.io/tactile/reference/xyplot.acf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot Autocovariance and Autocorrelation Functions — xyplot.acf","text":"Original Brian Ripley.","code":""},{"path":"https://jolars.github.io/tactile/reference/xyplot.acf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Autocovariance and Autocorrelation Functions — xyplot.acf","text":"","code":"z <- ts(matrix(rnorm(400), 100, 4), start = c(1961, 1), frequency = 12) xyplot(acf(z))"},{"path":"https://jolars.github.io/tactile/reference/xyplot.forecast.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Forecasts with Trellis Graphics — xyplot.forecast","title":"Plot Forecasts with Trellis Graphics — xyplot.forecast","text":"Plot forecasts forecast::forecast(). built mostly resemble forecast::autoplot.forecast() forecast::plot.forecast() functions, addition tries plot predictions original scale.","code":""},{"path":"https://jolars.github.io/tactile/reference/xyplot.forecast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Forecasts with Trellis Graphics — xyplot.forecast","text":"","code":"# S3 method for class 'forecast' xyplot(   x,   data = NULL,   ci = TRUE,   ci_levels = x$level,   ci_key = ci,   ci_pal = hcl(0, 0, 45:100),   ci_alpha = trellis.par.get(\"regions\")$alpha,   ... )"},{"path":"https://jolars.github.io/tactile/reference/xyplot.forecast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Forecasts with Trellis Graphics — xyplot.forecast","text":"x object class forecast. data Data observations left model fit, usually \"future\" observations. ci Plot confidence intervals predictions. ci_levels prediction levels plot subset forecasted x. ci_key Set TRUE draw key automatically provide list (length(ci_levels) > 5 work lattice::draw.colorkey() otherwise lattice::draw.key()) ci_pal Color palette confidence bands. ci_alpha Fill alpha confidence interval. ... Arguments passed lattice::panel.xyplot().","code":""},{"path":"https://jolars.github.io/tactile/reference/xyplot.forecast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Forecasts with Trellis Graphics — xyplot.forecast","text":"object class \"trellis\".   update method can used   update components object   print method (usually called   default) plot appropriate plotting device.","code":""},{"path":"https://jolars.github.io/tactile/reference/xyplot.forecast.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Forecasts with Trellis Graphics — xyplot.forecast","text":"function requires zoo package.","code":""},{"path":[]},{"path":"https://jolars.github.io/tactile/reference/xyplot.forecast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Forecasts with Trellis Graphics — xyplot.forecast","text":"","code":"if (require(forecast)) {   train <- window(USAccDeaths, c(1973, 1), c(1977, 12))   test <- window(USAccDeaths, c(1978, 1), c(1978, 12))   fit <- arima(train, order = c(0, 1, 1),                seasonal = list(order = c(0, 1, 1)))   fcast1 <- forecast(fit, 12)   xyplot(fcast1, test, grid = TRUE, auto.key = list(corner = c(0, 0.99)),          ci_key = list(title = \"PI Level\"))    # A fan plot   fcast2 <- forecast(fit, 12, level = seq(0, 95, 10))   xyplot(fcast2, test, ci_pal = heat.colors(100)) } #> Loading required package: forecast"},{"path":"https://jolars.github.io/tactile/reference/xyplot.lm.html","id":null,"dir":"Reference","previous_headings":"","what":"Lattice plot diagnostics for lm objects — xyplot.lm","title":"Lattice plot diagnostics for lm objects — xyplot.lm","text":"Lattice plot diagnostics lm objects, mostly mimicking behavior stats::plot.lm() based lattice::xyplot() instead.","code":""},{"path":"https://jolars.github.io/tactile/reference/xyplot.lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lattice plot diagnostics for lm objects — xyplot.lm","text":"","code":"# S3 method for class 'lm' xyplot(   x,   data = NULL,   which = c(1:3, 5),   main = FALSE,   id.n = 3,   labels.id = names(residuals(x)),   cex.id = 0.75,   cook.levels = c(0.5, 1),   label.pos = c(4, 2),   layout = NULL,   ... )"},{"path":"https://jolars.github.io/tactile/reference/xyplot.lm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lattice plot diagnostics for lm objects — xyplot.lm","text":"x lm object, typically result lm     glm. data provided method consistency ignored. subset plots required, specify subset numbers 1:6 main TRUE plots default titles. Can also list character vector length 6. id.n number points labelled plot, starting     extreme. labels.id vector labels, labels extreme     points chosen.  NULL uses observation numbers. cex.id magnification point labels. cook.levels levels Cook's distance draw contours. label.pos positioning labels, left half right     half graph respectively, plots 1-3, 5, 6. layout numeric vector [columns, rows] use call gridExtra::grid.arrange(), layout matrix passed layout_matrix grid.arrange(). ... arguments passed lattice::xyplot().","code":""},{"path":"https://jolars.github.io/tactile/reference/xyplot.lm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lattice plot diagnostics for lm objects — xyplot.lm","text":"list trellis objects single trellis object.","code":""},{"path":[]},{"path":"https://jolars.github.io/tactile/reference/xyplot.lm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Lattice plot diagnostics for lm objects — xyplot.lm","text":"Original John Maindonald Martin Maechler. Adaptation lattice Johan Larsson.","code":""},{"path":"https://jolars.github.io/tactile/reference/xyplot.lm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lattice plot diagnostics for lm objects — xyplot.lm","text":"","code":"fit <- lm(Sepal.Length ~ Sepal.Width, data = iris) xyplot(fit)  xyplot(fit, which = 5)"},{"path":"https://jolars.github.io/tactile/reference/xyz_to_xy.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a formula from z ~ x * y to y ~ x — xyz_to_xy","title":"Convert a formula from z ~ x * y to y ~ x — xyz_to_xy","text":"Convert formula z ~ x * y y ~ x","code":""},{"path":"https://jolars.github.io/tactile/reference/xyz_to_xy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a formula from z ~ x * y to y ~ x — xyz_to_xy","text":"","code":"xyz_to_xy(form)"},{"path":"https://jolars.github.io/tactile/reference/xyz_to_xy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a formula from z ~ x * y to y ~ x — xyz_to_xy","text":"form Three-dimensional lattice formula.","code":""},{"path":"https://jolars.github.io/tactile/reference/xyz_to_xy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a formula from z ~ x * y to y ~ x — xyz_to_xy","text":"two-dimensional lattice formula.","code":""}]
